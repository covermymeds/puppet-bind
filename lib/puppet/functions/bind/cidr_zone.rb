# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Returns an array suitable for passing to a defined type to create zone files.
#    Arguments are a base subnet and the CIDR number, example 10.1.0.0/22
#    This function uses the Net::Addr gem, gem install netaddr
#    We specifically ask for the address given to be split into class C subnets
#    in the future it may be extended to deal with other CIDR classes.
#
#    For example:
#
#        args[0] = 10.1.0.0/22 which returns ["10.0.0.0/24", "10.1.1.0/24", "10.1.2.0/24", "10.1.3.0/24"]
#
#
#
Puppet::Functions.create_function(:'bind::cidr_zone') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    require "netaddr"
    begin
      NetAddr::CIDR.create("#{args[0]}").subnet(:Bits => 24)
    end
  
  end
end
